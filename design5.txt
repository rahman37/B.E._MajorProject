//mixed-design bcd restoring division using a multiplexor
module div_bcd_mux (a, b, start, rslt, cout_quot);
input [7:0] a; //dividend
input [3:0] b; //divisor
input start;
output [7:0] rslt; //rslt[7:4] is rem; rslt[3:0] is quot
output cout_quot;
wire [3:0] b_bar;
reg [3:0] b_neg; //define internal registers
reg [7:0] rslt;
reg [3:0] count;
reg [4:0] sum;
reg cout, cout_quot;
assign b_bar = ~b; //1s complement of divisor
always @ (b_bar)
b_neg = b_bar + 1;//2s complement of divisor
always @ (posedge start)
begin
rslt = a;
count = 4'b0100;
if ((a!=0) && (b!=0))
while (count)
begin
rslt = rslt << 1;
sum = rslt[7:4] + b_neg;
cout = sum[4];
if (cout == 0)
begin
rslt[0] = cout; //q0 = cout
rslt[7:4] = rslt[7:4];
count = count -1;
end
else
begin
rslt[0] = cout; //q0 = cout
rslt[7:4] = sum[3:0];
count = count - 1;
end
end
//convert to bcd
if (rslt[3:0] > 4'b1001)
{cout_quot, rslt[3:0]} = rslt[3:0] + 4'b0110;
else
cout_quot = 1'b0;
end
endmodule