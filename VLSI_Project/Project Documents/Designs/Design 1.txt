//behavioral srt division using the case statement
module div1 (opnds, quot, rem, ovfl);
input [11:0] opnds; //dividend 8 bits; divisor 4 bits
output [3:0] quot, rem;
output ovfl;
wire [11:0] opnds;
reg [3:0] quot, rem;
reg ovfl;
//check for overflow
always @ (opnds)
begin
if (opnds[11:8] >= opnds[3:0])
ovfl = 1'b1;
else
ovfl = 1'b0;
end
always @ (opnds)
begin
case (opnds)
//dvdnd = +6;dvsr = +1;quot = 6;rem = 0
12'b000001100001 :begin
quot= 4'b0110;
rem = 4'b0000;
end
//continued on next page
//dvdnd = +7;dvsr = +2;quot = 3;rem = 1
12'b000001110010 :begin
quot= 4'b0011;
rem = 4'b0001;
end
//dvdnd = +17;dvsr = +3;quot = 5;rem = 2
12'b000100010011 :begin
quot= 4'b0101;
rem = 4'b0010;
end
//dvdnd = +41;dvsr = +3;quot = 13;rem = 2
12'b001010010011 :begin
quot= 4'b1101;
rem = 4'b0010;
end
//dvdnd = +51;dvsr = +8;quot = 6;rem = 3
12'b001100111000 :begin
quot= 4'b0110;
rem = 4'b0011;
end
//dvdnd = +72;dvsr = +5;quot = 14;rem = 2
12'b010010000101 :begin
quot= 4'b1110;
rem = 4'b0010;
end
//dvdnd = +76;dvsr = +6;quot = 12;rem = 4
12'b010011000110 :begin
quot= 4'b1100;
rem = 4'b0100;
end
//dvdnd = +110;dvsr = +7;quot = 15;rem = 5
12'b011011100111 :begin
quot= 4'b1111;
rem = 4'b0101;
end
//continued on next page
//dvdnd = +97;dvsr = +5;quot = 19;rem = 2
//overflow occurs
12'b011000010101 :begin
quot= 4'bxxxx;
rem = 4'bxxxx;
end
//dvdnd = +70;dvsr = +4;quot = 17;rem = 2
//overflow occurs
12'b010001100100 :begin
quot= 4'bxxxx;
rem = 4'bxxxx;
end
default :begin
quot= 4'b0000;
rem = 4'b0000;
end
endcase
end
endmodule
