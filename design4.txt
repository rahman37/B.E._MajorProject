//mixed-design for bcd restoring division
module div_bcd (a, b, start, rslt, cout_quot);
input [7:0] a;
input [3:0] b;
input start;
output [7:0] rslt;
output cout_quot;
wire [3:0] b_bar;
//define internal registers
reg [3:0] b_neg;
reg [7:0] rslt;
reg [3:0] count;
reg [3:0] quot;
reg cout_quot;
assign b_bar = ~b;
always @ (b_bar)
b_neg = b_bar + 1;
always @ (posedge start)
begin
rslt = a;
count = 4'b0100;
if ((a!=0) && (b!=0))
begin
rslt = rslt << 1;
rslt = {(rslt[7:4] + b_neg), rslt[3:0]};
if (rslt[7] == 1) //restore
begin
rslt = {(rslt[7:4]+b), rslt[3:1], 1'b0};
count = count - 1;
end
else //no restore
begin
rslt = {rslt[7:1], 1'b1};
count = count - 1;
end
end
if (rslt[3:0] > 4'b1001) //convert to bcd
{cout_quot, rslt[3:0]} = rslt[3:0] + 4'b0110;
else
cout_quot = 1'b0;
end
endmodule